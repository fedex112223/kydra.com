'use strict';

var fs = require('node:fs');
var path = require('node:path');
var env = require('@socketsecurity/registry/lib/env');
var registryConstants = require('@socketsecurity/registry/lib/constants');

const {
  PACKAGE_JSON,
  kInternalsSymbol,
  [kInternalsSymbol]: {
    createConstantsObject
  }
} = registryConstants;
const API_V0_URL = 'https://api.socket.dev/v0';
const BABEL_RUNTIME = '@babel/runtime';
const BINARY_LOCK_EXT = '.lockb';
const BUN = 'bun';
const LOCK_EXT = '.lock';
const NPM_REGISTRY_URL = 'https://registry.npmjs.org';
const NPX = 'npx';
const PNPM = 'pnpm';
const SOCKET_CLI_ISSUES_URL = 'https://github.com/SocketDev/socket-cli/issues';
const UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE = 'UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE';
const VLT = 'vlt';
const YARN_BERRY = 'yarn/berry';
const YARN_CLASSIC = 'yarn/classic';
const LAZY_DIST_TYPE = () => registryConstants.SUPPORTS_NODE_REQUIRE_MODULE ? 'module-sync' : 'require';
const LAZY_ENV = () => Object.freeze({
  // Lazily access registryConstants.ENV.
  ...registryConstants.ENV,
  // Flag set by the optimize command to bypass the packagesHaveRiskyIssues check.
  [UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE]: env.envAsBoolean(process.env[UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE])
});
const lazyCdxgenBinPath = () =>
// Lazily access constants.nmBinPath.
path.join(constants.nmBinPath, 'cdxgen');
const lazyDistPath = () =>
// Lazily access constants.rootDistPath and constants.DIST_TYPE.
path.join(constants.rootDistPath, constants.DIST_TYPE);
const lazyNmBinPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, 'node_modules/.bin');
const lazyRootBinPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, 'bin');
const lazyRootDistPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, 'dist');
const lazyRootPath = () => path.resolve(fs.realpathSync(__dirname), '..');
const lazyRootPkgJsonPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, PACKAGE_JSON);
const lazyShadowBinPath = () =>
// Lazily access constants.rootPath.
path.join(constants.rootPath, 'shadow-bin');
const lazySynpBinPath = () =>
// Lazily access constants.nmBinPath.
path.join(constants.nmBinPath, 'synp');
const constants = createConstantsObject({
  API_V0_URL,
  BABEL_RUNTIME,
  BINARY_LOCK_EXT,
  BUN,
  ENV: undefined,
  // Lazily defined values are initialized as `undefined` to keep their key order.
  DIST_TYPE: undefined,
  LOCK_EXT,
  NPM_REGISTRY_URL,
  NPX,
  PNPM,
  SOCKET_CLI_ISSUES_URL,
  UPDATE_SOCKET_OVERRIDES_IN_PACKAGE_LOCK_FILE,
  VLT,
  YARN_BERRY,
  YARN_CLASSIC,
  cdxgenBinPath: undefined,
  distPath: undefined,
  nmBinPath: undefined,
  rootBinPath: undefined,
  rootDistPath: undefined,
  rootPath: undefined,
  rootPkgJsonPath: undefined,
  shadowBinPath: undefined,
  synpBinPath: undefined
}, {
  getters: {
    DIST_TYPE: LAZY_DIST_TYPE,
    ENV: LAZY_ENV,
    distPath: lazyDistPath,
    cdxgenBinPath: lazyCdxgenBinPath,
    nmBinPath: lazyNmBinPath,
    rootBinPath: lazyRootBinPath,
    rootDistPath: lazyRootDistPath,
    rootPath: lazyRootPath,
    rootPkgJsonPath: lazyRootPkgJsonPath,
    shadowBinPath: lazyShadowBinPath,
    synpBinPath: lazySynpBinPath
  },
  mixin: registryConstants
});

module.exports = constants;
