'use strict';

function _socketInterop(e) {
  let c = 0
  for (const k in e ?? {}) {
    c = c === 0 && k === 'default' ? 1 : 0
    if (!c && k !== '__esModule') break
  }
  return c ? e.default : e
}

var fs = require('node:fs');
var path = require('node:path');
var spawn = _socketInterop(require('@npmcli/promise-spawn'));
var constants = require('./constants.js');
var cmdShim = _socketInterop(require('cmd-shim'));
var pathResolve = require('./path-resolve.js');

const {
  WIN32,
  rootDistPath
} = constants;
async function installLinks(realBinPath, binName) {
  // Find package manager being shadowed by this process.
  const {
    path: binPath,
    shadowed
  } = await pathResolve.findBinPathDetails(binName);
  if (!binPath) {
    // The exit code 127 indicates that the command or binary being executed
    // could not be found.
    console.error(`Socket unable to locate ${binName}; ensure it is available in the PATH environment variable.`);
    process.exit(127);
  }
  // TODO: Is this early exit needed?
  if (WIN32 && binPath) {
    return binPath;
  }
  // Move our bin directory to front of PATH so its found first.
  if (!shadowed) {
    if (WIN32) {
      await cmdShim(path.join(rootDistPath, `${binName}-cli.js`), path.join(realBinPath, binName));
    }
    process.env['PATH'] = `${realBinPath}${path.delimiter}${process.env['PATH']}`;
  }
  return binPath;
}

const {
  NPM,
  abortSignal,
  distPath,
  execPath,
  shadowBinPath
} = constants;
const injectionPath = path.join(distPath, 'npm-injection.js');
async function shadow(binName, binArgs = process.argv.slice(2)) {
  const binPath = await installLinks(shadowBinPath, binName);
  if (abortSignal.aborted) {
    return;
  }
  // Adding the `--quiet` and `--no-progress` flags when the `proc-log` module
  // is found to fix a UX issue when running the command with recent versions of
  // npm (input swallowed by the standard npm spinner)
  if (binName === NPM && binArgs.includes('install') && !binArgs.includes('--no-progress') && !binArgs.includes('--quiet')) {
    const npmEntrypoint = fs.realpathSync(binPath);
    const npmRootPath = pathResolve.findRoot(path.dirname(npmEntrypoint));
    if (npmRootPath === undefined) {
      // The exit code 127 indicates that the command or binary being executed
      // could not be found.
      process.exit(127);
    }
    const npmDepPath = path.join(npmRootPath, 'node_modules');
    let procLog;
    try {
      procLog = require(path.join(npmDepPath, 'proc-log/lib/index.js')).log;
    } catch {}
    if (procLog) {
      binArgs.push('--no-progress', '--quiet');
    }
  }
  process.exitCode = 1;
  const spawnPromise = spawn(execPath, [
  // Lazily access constants.nodeNoWarningsFlags.
  ...constants.nodeNoWarningsFlags, '--require', injectionPath, binPath, ...binArgs], {
    signal: abortSignal,
    stdio: 'inherit'
  });
  // See https://nodejs.org/api/all.html#all_child_process_event-exit.
  spawnPromise.process.on('exit', (code, signalName) => {
    if (abortSignal.aborted) {
      return;
    }
    if (signalName) {
      process.kill(process.pid, signalName);
    } else if (code !== null) {
      process.exit(code);
    }
  });
  await spawnPromise;
}

module.exports = shadow;
